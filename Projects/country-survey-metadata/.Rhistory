source('r-scripts/collect-dhs.R')
source('r-scripts/collect-rhs.R', encoding = 'UTF-8')
source('r-scripts/collect-lsms.R')
source('r-scripts/collect-whs.R')
source('r-scripts/collect-mics.R')
# Subselect columns
hs_vars <- c('ISO3', 'Year', 'TypeText')
dhs <- dhs[hs_vars]
rhs <- rhs[hs_vars]
lsms <- lsms[hs_vars]
whs <- whs[c(hs_vars)]
mics <- mics[hs_vars]
# Latest population census (from unstats.un.org) --------------------------
# Source script
source('r-scripts/collect-unstat-census.R')
# Combine footnote and Year columns
un_census$Year <- with(un_census, ifelse(is.na(Year), '', Year))
un_census$Year <- with(un_census, paste0(Year, Footnote))
un_census$Year <- gsub('[(][0-9][)]', '.', un_census$Year)
un_census$Footnote <- NULL
# Subselect columns
un_census <- un_census[c('ISO3', 'Year')]
# Rename Year to 'Latest population census'
names(un_census) <- sub('Year', 'Latest population census',
names(un_census))
# Vital registration from (from unstats.un.org)  --------------------------
# Source script
source('r-scripts/collect-unstat-vitstats.R')
# Subselect columns
un_vitstats <- un_vitstats[c('ISO3', 'Complete')]
# Rename 'Complete' to 'Vital registration complete'
names(un_vitstats) <- sub('Complete', 'Vital registration complete',
names(un_vitstats))
# Combine tables  ---------------------------------------------------------
# Combine household survey tables
hs_survey <- merge(dhs, rhs, by = hs_vars, all = TRUE)
hs_survey <- merge(hs_survey, lsms, by = hs_vars, all = TRUE)
hs_survey <- merge(hs_survey, mics, by = hs_vars, all = TRUE)
hs_survey <- merge(hs_survey, whs, by = hs_vars, all = TRUE)
# Select latest survey year
hs_survey <- hs_survey %>%
group_by(ISO3) %>%
filter(Year == max(Year)) %>%
ungroup() %>%
as.data.frame()
# Delete year variable
hs_survey$Year <- NULL
# Rename Year column
names(hs_survey) <- sub('TypeText', 'Latest household survey',
names(hs_survey))
# Merge the combined health survey table with the census table
output <- merge(hs_survey, un_census,
by = 'ISO3',
all = TRUE)
# Merge the combined output with the vital registration table
output <- merge(output, un_vitstats,
by = 'ISO3',
all = TRUE)
# Remove objects from workspace
rm(whs, rhs, dhs, lsms, mics, hs_survey,
un_census, un_vitstats, hs_vars)
# Add offical contry names (from iban.com) --------------------------------
# Fetch table with coutry codes from iban.com
the_url <- 'https://www.iban.com/country-codes'
iban_cc <- the_url %>%
read_html() %>%
html_node('table') %>%
html_table() %>%
select(Country, `Alpha-3 code`)%>%
as.data.frame()
# Merge data frames
output <- merge(output, iban_cc, by.x = 'ISO3',
by.y='Alpha-3 code', all = TRUE)
# Reorder columns
output <- output[c("ISO3", "Country", "Latest household survey",
"Latest population census", "Vital registration complete")]
# Add country code for Kosovo
output$Country <- with(output, ifelse(ISO3 == 'XKX', 'Kosovo', Country))
# Add country code for Netherlands Antilles
output$Country <- with(output, ifelse(ISO3 == 'ANT', 'Netherlands Antilles', Country))
# Remove objects from workspace
rm(iban_cc, the_url)
# Write to Excel ----------------------------------------------------------
# Rename columns
names(output)[1:2] <- c('Country', 'Table name')
# Recode NA to empty string
output[is.na(output)] <- ''
output$`Latest population census`
# Write to Excel
wb <- createWorkbook()
addWorksheet(wb, 'Country_Table', gridLines = TRUE)
writeDataTable(wb, sheet = 'Country_Table', output, withFilter = TRUE)
setColWidths(wb, 'Country_Table', cols=1:5, widths = c(10, 55, 68, 25, 25))
saveWorkbook(wb, paste0('data/output/output-country-info-', Sys.Date(), '.xlsx'),
overwrite = TRUE)
rm(wb)
#### ---- COLLECT UN POPULATION CENSUS TABLE ---- ####
# Start up  ---------------------------------------------------------------
message(
'Collecting the latest poplulation census for all countries ',
'from The UN\'s World Population and Housing Census Programme')
# Load packages if needed
if(!'httr' %in% .packages()) library(httr)
if(!'rvest' %in% .packages()) library(rvest)
if(!'dplyr' %in% .packages()) library(dplyr)
# Load custom functions
source('r-scripts/_common.R')
# Load dataset with ISO codes
iso <- load_iso()
# Extract the table  ------------------------------------------------------
# Create a string w/ the url for census tables
the_url <- 'https://unstats.un.org/unsd/demographic-social/census/censusdates/'
message('Scraping table from ', the_url)
# Retrieve the HTML content
the_html <- content(GET(the_url))
# Extract information from the footnotes tab
h <- the_html %>% html_nodes('#Footnotes .row')
note <- h %>% html_nodes('[class^="col-md-"]:nth-child(1)') %>% html_text() %>% trimws()
text <- h %>% html_nodes('[class^="col-md-"]:nth-child(2)') %>% html_text() %>% trimws()
footnotes <- data.frame(note = note, text = text, stringsAsFactors = FALSE)
rm(h, note, text)
# Create a vector with HTML content to look for
table_tabs <- sprintf('#%s .row', c('Africa', 'North', 'South', 'Asia', 'Europe', 'Oceania'))
# Extract information for the five continents
dl <- list()
for(i in 1:length(table_tabs)){
t <- the_html %>% html_nodes(table_tabs[i])
dl[[i]] <- lapply(t, function(h){
country <- h %>% html_nodes('[class^="col-md-"]:nth-child(1)') %>% html_text() %>% trimws() %>% gsub('.*\\r\\n +', '', .)
round1990 <- h %>% html_nodes('[class^="col-md-"]:nth-child(2)') %>% html_text() %>% trimws() %>% gsub('.*\\r\\n +', '', .)
round2000 <- h %>% html_nodes('[class^="col-md-"]:nth-child(3)') %>% html_text() %>% trimws() %>% gsub('.*\\r\\n +', '', .)
round2010 <- h %>% html_nodes('[class^="col-md-"]:nth-child(4)') %>% html_text() %>% trimws() %>% gsub('.*\\r\\n +', '', .)
round2020 <- h %>% html_nodes('[class^="col-md-"]:nth-child(5)') %>% html_text() %>% trimws() %>% gsub('.*\\r\\n +', '', .)
out <- cbind(country, round1990, round2000, round2010, round2020)
return(out)
})
# Bind the result for each tab together to a data frame
dl[[i]] <- do.call('rbind', dl[[i]])
# Remove the first row in each tab table (the header)
#dl[[i]] <- dl[[i]][-1,]
}
# Convert to a single data frame
df <- do.call('rbind', dl)
df <- data.frame(df, stringsAsFactors = FALSE)
# Clean objects from workspace
rm(i, t, dl, table_tabs)
# Data transformations  ---------------------------------------------------
# Fill empty rows with the previous country name
for(i in 2:nrow(df)){
df$country[i] <- with(df, ifelse(country[i] == '', country[i - 1], country[i]))
}
rm(i)
# Rename UK
df$country <- with(df, ifelse(country %in%
c('- England and Wales', '- Scotland',  '- Northern Ireland'),
'United Kingdom',
country))
# Replace future survey dates with a string 'in the future'
df$round2020 <- sub('[(].*[)]', 'in the future', df$round2020)
# Get the footnotes from each column
footnote_df <- sapply(df, function(x){
regmatches(x, gregexpr('[(][0-9]+[)]|[(][A-Z][)]', x)) %>%
ifelse(. == 'character(0)', '', .) %>%
as.character()
})
# Remove footnote from country name
df$country <- gsub('[(][0-9]+[)]', '', df$country)
# Remove trailing whitespace
df$country <- gsub('\\s+$', '', df$country)
# Replace day/month and other text with nothing (leaving only the year)
df[2:5] <- sapply(df[2:5], function(x){
gsub('.* |.*[.]', '', x)
})
# Add a column with the latest survey year
df$year <- apply(df, 1, function(x){
# Convert row to numeric
row <- suppressWarnings(as.numeric(x))
# Get the maximum value
m <- x[which.max(row)]
# Convert to character
m <- as.character(m)
# Set value to NA if there is no survey year for any round
if(length(m) == 0) m <- NA
return(m)
})
df$year <- as.numeric(df$year)
# Add footnotes -----------------------------------------------------------
# Footnote(s) from country column
fn1 <- footnote_df[,1]
# Footnote(s) from the latest survey year
t <- apply(df[2:5], 1, function(x){
# Convert row to numeric
row <- suppressWarnings(as.numeric(x))
# Get the maximum value
m <- which.max(row)
if(length(m) == 0) m <- NA
m[[1]]
})
fn2 <- list()
for(i in 1:nrow(footnote_df)){
fn2[[i]] <- footnote_df[i, t[i]+1 ]
}
rm(i, t, footnote_df)
fn2 <- unname(unlist(fn2))
fn2 <- ifelse(is.na(fn2), '', fn2)
# Add footnote column to data frame
# df$footnote1 <- fn1
# df$footnote2 <- fn2
df$footnote <- ifelse(fn1 == '', fn2, fn1)
rm(fn1, fn2)
#Fix footnote for Germany
df$footnote <- ifelse(df$country == 'Germany', '(18)', df$footnote)
# Merge footnotes with df
df <- merge(df, footnotes, by.x = 'footnote', by.y = 'note', all.x = TRUE)
# Combine text and text columns
df$text <- with(df, ifelse(is.na(text), '', text))
df$footnote <- with(df, paste(footnote, text))
df$text <- NULL
# Finalize the data frame -------------------------------------------------
# Add column with ISO codes
df <- merge(df, iso, by.x = 'country', by.y = 'Country_name', all.x = TRUE)
# Subselect the last survey year for each country
df <- df %>%
group_by(country) %>%             # Group by country
arrange(desc(year)) %>%           # Order by descending year
slice(1) %>%                      # Select first row from each group
ungroup() %>%
as.data.frame()
# x <- df %>%
#   group_by(country) %>%             # Group by country
#   filter(year == max(year, na.rm = TRUE)) %>%     # Select the survey(s) from the latest year
#   ungroup() %>%
#   as.data.frame()
# Rename columns
names(df) <- firstup(names(df))
# Rearrange columns
df <- df[c('ISO3', 'Country', 'Year', 'Footnote')] # 'Round1990', 'Round2000', 'Round2010', 'Round2020',
# Assign to 'un_census' object
un_census <- df
# Clean workspace
rm(footnotes, the_html, the_url)
rm(df, iso)
message('Done! UN Census table collected. ',
'It has been assigned to the object \'un_census\' in your workspace.',
appendLF = TRUE)
View(un_census)
View(un_census)
# ------------------------ VITAL REGISTRATION -----------------------------
# Start up ----------------------------------------------------------------
message('Collecting vital registrations (births, deaths and infant deaths) ',
'for all countries from The UN\'s Population and Vital Statistics Report.',
appendLF = TRUE)
# JAVA settings
message(
'Note: This script use the package \'tabulizer\' which depends on Java. ',
'Make sure you have either Oracle JDK (https://www.oracle.com/java/technologies/javase-downloads.html) ',
'or Open JDK (https://openjdk.java.net/) installed.\n')
# Set JAVA_HOME if it doesn't exist
message('Checking environmental variables for \'JAVA_HOME\'...')
if(Sys.getenv('JAVA_HOME') == ''){
message('No \'JAVA_HOME\' variable found.')
message('Setting JAVA_HOME to ', Sys.getenv('JDK_PATH'))
Sys.setenv(JAVA_HOME = Sys.getenv('JDK_PATH'))
message('Added ', Sys.getenv('JDK_PATH'), ' to the PATH')
Sys.setenv(PATH = sprintf('%s%s;', Sys.getenv('PATH'), Sys.getenv('JDK_PATH')))
}
message('Done. Environmental variables have been set.')
# Load packages if needed
if(!'tabulizer' %in% .packages()) library(tabulizer)
if(!'magrittr' %in% .packages()) library(magrittr)
# Load custom functions
source('r-scripts/_common.R')
# Load dataset with ISO codes
iso <- load_iso()
# Extract the table -------------------------------------------------------
# Create a string with the URL
the_url <- 'https://unstats.un.org/unsd/demographic-social/products/vitstats/seratab3.pdf'
message('Extracting table from ', the_url)
# Extract the table (page 1 - 6)
the_tables <- extract_tables(the_url, pages = 1:6, encoding = 'UTF-8')
#area = list(c(106, 43, 716, 590)))
# Convert to data frame
dl <- lapply(the_tables, extract_df)
df <- do.call( 'rbind', dl)
# Data tranformations -----------------------------------------------------
# Replace '...' with NA
df <- data.frame(df[1],
apply(df[2:ncol(df)], 2, function(x)
gsub('[.]{3}', NA, x)
),
stringsAsFactors = FALSE)
# Add variable for complete registration (Yes/NA)
df$complete <- with(df, ifelse(grepl('C', live.births.code)
& grepl('C', deaths.code), 'Yes', ''))
# df$complete <- ifelse(apply(df, 1, function(x) any(is.na(x))),
#                       NA, 'Yes')
# Finalize the data frame -------------------------------------------------
# Add column with ISO codes
df <- merge(df, iso, by.x = 'country',
by.y = 'Country_name',
all.x = TRUE)
# Rename columns
names(df) <- firstup(gsub('[.]', ' ', names(df)))
# Rearrange columns
df <- df[c(16, 1:15)]
# Assign to 'un_vitstats' object
un_vitstats <- df
# Clean workspace
rm(the_tables, dl, the_url, extract_df)
rm(df, iso)
message('Done! UN Vital registration table collected. ',
'It has been assigned to the object \'un_vitstats\' in your workspace.',
appendLF = TRUE)
# Clean workspace
rm(list = ls())
# Load packages
library(openxlsx)
# Latest household survey -------------------------------------------------
# Source scripts
source('r-scripts/collect-dhs.R')
source('r-scripts/collect-rhs.R', encoding = 'UTF-8')
source('r-scripts/collect-lsms.R')
source('r-scripts/collect-whs.R')
source('r-scripts/collect-mics.R')
# Latest population census (from unstats.un.org) --------------------------
# Source script
source('r-scripts/collect-unstat-census.R')
# Vital registration from (from unstats.un.org)  --------------------------
# Source script
source('r-scripts/collect-unstat-vitstats.R')
# Write to Excel ---------------------------------------------------------
# Create vector with sheet names
sheet_names <- c('DHS', 'RHS', 'WHS',  'LSMS', 'MICS',
'UN Census', 'UN Vitstats')
# Create list objects with all tables
the_list <- list(dhs, rhs, whs, lsms, mics,
un_census, un_vitstats)
# Write to Excel
wb <- createWorkbook()
for(i in 1:7){
addWorksheet(wb, sheet_names[i])
writeDataTable(wb, sheet = sheet_names[i], the_list[[i]], withFilter = FALSE)
setColWidths(wb, sheet = sheet_names[i], cols = 1:ncol(the_list[[i]]), widths = 'auto')
}
saveWorkbook(wb, paste0('data/output/output-all-tables-', Sys.Date(), '.xlsx'),
overwrite = TRUE)
library(tidyverse)
library(wbstats)
library(tidyverse)
library(wbstats)
countries <- wbcountries()
View(countries)
library(tidyverse)
library(wbstats)
countries <- wbcountries()
lending_groups <-  countries %>%
group_by(lending) %>%
summarise(n=n())
View(iso)
View(iso)
View(lending_groups)
View(countries)
library(tidyverse)
library(wbstats)
countries <- wbcountries()
lending_groups <-  countries %>%
group_by(lendingID) %>%
summarise(n=n())
library(tidyverse)
library(wbstats)
countries <- wbcountries()
lending_groups <-  countries %>%
group_by(lendingID) %>%
summarise(n=n())
countries_nonlending <- countries %>%
filter(lendingID=="LNX")
View(countries_nonlending)
View(countries_nonlending)
library(tidyverse)
library(wbstats)
countries <- wbcountries()
lending_groups <-  countries %>%
group_by(lendingID) %>%
summarise(n=n())
countries_nonlending <- countries %>%
filter(lendingID=="LNX")
gni_per_cap <- wb(
countr='LNX',
indicator='NY.GNP.PCAP.CD'
mrv=1
)
gni_per_cap <- wb(
gni_per_cap <- wb(
countr='LNX',
indicator='NY.GNP.PCAP.CD',
mrv=1
)
gni_per_cap <- wb(
countr='LNX',
indicator='NY.GNP.PCAP.CD',
mrv=1
)
gni_per_cap <- wb(
countr='LNX',
indicator='NY.GNP.PCAP.CD',
mrv=1
)
gni_per_cap <- wb_data(
country='countries_only',
indicator='NY.GNP.PCAP.CD',
mrv=1
)
View(gni_per_cap)
library(tidyverse)
library(wbstats)
countries <- wbcountries()
lending_groups <-  countries %>%
group_by(lendingID) %>%
summarise(n=n())
countries_nonlending <- countries %>%
filter(lendingID=="LNX")
gni_per_cap <- wb_data(
country='countries_only',
indicator='NY.GNP.PCAP.CD',
mrv=1) %>%
right_join(countries_nonlending)
View(gni_per_cap)
library(tidyverse)
library(wbstats)
countries <- wbcountries()
lending_groups <-  countries %>%
group_by(lendingID) %>%
summarise(n=n())
countries_nonlending <- countries %>%
filter(lendingID=="LNX")
gni_per_cap <- wb_data(
country='countries_only',
indicator='NY.GNP.PCAP.CD',
mrv=1) %>%
right_join(countries_nonlending) %>%
arrange(NY.GNP.PCAP.CD)
View(gni_per_cap)
library(tidyverse)
library(wbstats)
countries <- wbcountries()
lending_groups <-  countries %>%
group_by(lendingID) %>%
summarise(n=n())
countries_nonlending <- countries %>%
filter(lendingID=="LNX")
gni_per_cap <- wb_data(
country='countries_only',
indicator='NY.GNP.PCAP.CD',
mrv=1) %>%
right_join(countries_nonlending) %>%
arrange(NY.GNP.PCAP.CD) %>%
write_excel_csv('C:\Users\wb469649\OneDrive - WBG\DECIS\SPI_AKI\non-lending_data_collection.csv')
library(tidyverse)
library(wbstats)
countries <- wbcountries()
lending_groups <-  countries %>%
group_by(lendingID) %>%
summarise(n=n())
countries_nonlending <- countries %>%
filter(lendingID=="LNX")
gni_per_cap <- wb_data(
country='countries_only',
indicator='NY.GNP.PCAP.CD',
mrv=1) %>%
right_join(countries_nonlending) %>%
arrange(NY.GNP.PCAP.CD) %>%
write_excel_csv('C:/Users/wb469649/OneDrive - WBG/DECIS/SPI_AKI/non-lending_data_collection.csv')
View(countries_nonlending)
library(tidyverse)
library(wbstats)
countries <- wbcountries()
lending_groups <-  countries %>%
group_by(lendingID) %>%
summarise(n=n())
countries_nonlending <- countries %>%
filter(lendingID=="LNX")
gni_per_cap <- wb_data(
country='countries_only',
indicator=c('NY.GNP.PCAP.CD','SP.POP.TOTL'),
mrv=1) %>%
right_join(countries_nonlending) %>%
arrange(NY.GNP.PCAP.CD) %>%
write_excel_csv('C:/Users/wb469649/OneDrive - WBG/DECIS/SPI_AKI/non-lending_data_collection.csv')
View(countries_nonlending)
gni_per_cap <- wb_data(
country='countries_only',
indicator=c('NY.GNP.PCAP.CD','SP.POP.TOTL'),
mrv=1) %>%
right_join(countries_nonlending) %>%
arrange(NY.GNP.PCAP.CD)
View(gni_per_cap)
View(gni_per_cap)
library(tidyverse)
library(wbstats)
countries <- wbcountries()
lending_groups <-  countries %>%
group_by(lendingID) %>%
summarise(n=n())
countries_nonlending <- countries %>%
filter(lendingID=="LNX")
gni_per_cap <- wb_data(
country='countries_only',
indicator=c('NY.GNP.PCAP.CD','SP.POP.TOTL'),
mrv=1) %>%
right_join(countries_nonlending) %>%
arrange(NY.GNP.PCAP.CD) %>%
write_excel_csv('C:/Users/wb469649/OneDrive - WBG/DECIS/SPI_AKI/non-borrowing_data_collection.csv')
